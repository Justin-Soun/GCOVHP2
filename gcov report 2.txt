        -:    0:Source:main.cc
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:9
        -:    1:#include "/public/read.h"
        -:    2://#include <gtest/gtest.h>
        -:    3:#include <vector>
        -:    4:#include <algorithm>
        -:    5:#include <cmath>
        -:    6:#include <boost/multiprecision/cpp_int.hpp>
        -:    7:#include <boost/multiprecision/miller_rabin.hpp>
        -:    8:#include <time.h>
        -:    9:using namespace boost::multiprecision;
        -:   10:using namespace std;
        -:   11:
        -:   12:#include "functions.h"
        -:   13:
        -:   14://YOU: Maybe write a function to see if a number is prime here?
        -:   15:// (Or not, I'm not your boss.)
        -:   16://The Boost Multiprecision Miller-Rabin primality test is installed somewhere on the server.
        -:   17://If you can find it, you can use it
        -:   18:const array<cpp_int, 21> cache = {
        -:   19:        0,
        -:   20:        4,
        -:   21:        25,
        -:   22:        168,
        -:   23:        1'229,
        -:   24:        9'592,
        -:   25:        78'498,
        -:   26:        664'579,
        -:   27:        5'761'455,
        -:   28:        50'847'534,
        -:   29:        455'052'511,
        -:   30:        4'118'054'813,
        -:   31:        37'607'912'018,
        -:   32:        346'065'536'839,
        -:   33:        3'204'941'750'802,
        -:   34:        29'844'570'422'669,
        -:   35:        279'238'341'033'925,
        -:   36:        2'623'557'157'654'233,
        -:   37:        24'739'954'287'740'860,
        -:   38:        234'057'667'276'344'607,
        -:   39:        2'220'819'602'560'918'840
        -:   40:};
        -:   41:
        3:   42:void die() {
        3:   43:        cout << "BAD INPUT!" << endl;
        3:   44:        exit(EXIT_FAILURE);
        -:   45:}
        -:   46:
  2105004:   47:bool isPrime(cpp_int x) {
  2105004:   48:        if (x <= 1) {
        -:   49:                return false;
        -:   50:        }
  2105004:   51:        return miller_rabin_test(x, 1);
        -:   52:}
        -:   53:
        6:   54:string calculate(cpp_int minOfUser, cpp_int max, vector<cpp_int> primeNumbers, cpp_int printOrNot){
        6:   55:        if (minOfUser <= 1) {
    #####:   56:                return "Error";
        6:   57:        } else if (max <= 1) {
    #####:   58:                return "Error";
        6:   59:        } else if (max < minOfUser) {
    #####:   60:                return "Error";
        -:   61:        }
        6:   62:  int min = 2;
        6:   63:  int primeAmount = 0;
        6:   64:        int sum = 0;
       6*:   65:        for (cpp_int i = minOfUser - 1; i >= 2; i--) {
    #####:   66:                if (isPrime(i) == true) {
    #####:   67:                        primeNumbers.push_back(i);
        -:   68:                }
    #####:   69:        }
        -:   70:
  4210020:   71:        for (cpp_int i = minOfUser; i <= max; i++) {
  4210008:   72:                if (isPrime(i) == true) {
   171853:   73:                        primeNumbers.push_back(i);
        -:   74:
        -:   75:                }
    #####:   76:        }
        -:   77:
  2105010:   78:        for (cpp_int i = min; i <= max; i++) {
  2105004:   79:                auto it = find(primeNumbers.begin(), primeNumbers.end(), i);
  2105004:   80:                if (it == primeNumbers.end()) {
        -:   81:                        primeAmount += 0;
        -:   82:                } else {
   171853:   83:                        primeAmount++;
        -:   84:                }
  2105004:   85:                if (i >= minOfUser and i <= max) {
  2105004:   86:                        sum += primeAmount;
  2105004:   87:                        if (printOrNot <= 10) {
  2105004:   88:                                cout << "pi(" << i << ") = " << primeAmount << endl;
        -:   89:                        }
        -:   90:                }
    #####:   91:        }
        6:   92:        return to_string(sum);
    #####:   93:}
        -:   94:/*
        -:   95:TEST(Calc, GoodTests) {
        -:   96:        vector<cpp_int> primes;
        -:   97:        EXPECT_EQ(calculate(2,3,primes,0), "3");
        -:   98:        EXPECT_EQ(calculate(2, 13, primes,0), "43");
        -:   99:        EXPECT_EQ(calculate(52, 235, primes, 0), "6234");
        -:  100:        EXPECT_EQ(calculate(100, 10000, primes, 0), "6553393");
        -:  101:        EXPECT_EQ(calculate(2, 100000, primes, 0), "504813055");
        -:  102:}
        -:  103:TEST(Calc, BadTests) {
        -:  104:        vector<cpp_int> primes;
        -:  105:        EXPECT_EQ(calculate(1, 10, primes, 0), "Error");
        -:  106:        EXPECT_EQ(calculate(-50, 10, primes,  0), "Error");
        -:  107:        EXPECT_EQ(calculate(50, -10, primes,  0), "Error");
        -:  108:        EXPECT_EQ(calculate(2, -100, primes, 0), "Error");
        -:  109:        EXPECT_EQ(calculate(50, 10, primes, 0), "Error");
        -:  110:}
        -:  111:TEST(Calc, EdgeTests) {
        -:  112:        vector<cpp_int> primes;
        -:  113:        EXPECT_EQ(calculate(2, 2, primes,0), "1");
        -:  114:        EXPECT_EQ(calculate(1, 2, primes,  0), "Error");
        -:  115:        EXPECT_EQ(calculate(2, 1, primes, 0), "Error");
        -:  116:        EXPECT_EQ(calculate(2, 4, primes,  0), "5");
        -:  117:        EXPECT_EQ(calculate(2, 5, primes, 0), "8");
        -:  118:}
        -:  119:TEST(Prime, GoodTests) {
        -:  120:        EXPECT_EQ(isPrime(2), true);
        -:  121:        EXPECT_EQ(isPrime(1231), true);
        -:  122:        EXPECT_EQ(isPrime(97), true);
        -:  123:        EXPECT_EQ(isPrime(401), true);
        -:  124:        EXPECT_EQ(isPrime(859), true);
        -:  125:}
        -:  126:TEST(Prime, BadTests) {
        -:  127:        EXPECT_EQ(isPrime(12), false);
        -:  128:        EXPECT_EQ(isPrime(126), false);
        -:  129:        EXPECT_EQ(isPrime(-256), false);
        -:  130:        EXPECT_EQ(isPrime(-1231231), false);
        -:  131:        EXPECT_EQ(isPrime(10000000), false);
        -:  132:}
        -:  133:TEST(Prime, EdgeTests) {
        -:  134:        EXPECT_EQ(isPrime(1), false);
        -:  135:        EXPECT_EQ(isPrime(0), false);
        -:  136:        EXPECT_EQ(isPrime(2), true);
        -:  137:        EXPECT_EQ(isPrime(3), true);
        -:  138:        EXPECT_EQ(isPrime(4), false);
        -:  139:}
        -:  140:*/
        9:  141:int main(){
        -:  142://int main(int argc, char** argv) {
        -:  143:        //testing::InitGoogleTest(&argc, argv);
        -:  144:/*
        -:  145:        int user = 0;
        -:  146:        cout << "1) For GTest" << endl;
        -:  147:        cout << "2) For Zeta" << endl;
        -:  148:        cin >> user;
        -:  149:
        -:  150:        if (user == 1) {
        -:  151:                cout << RUN_ALL_TESTS() << endl;
        -:  152:        }
        -:  153:        else if (user == 2) {
        -:  154:*/
        -:  155:
        -:  156:
        9:  157:                cout << "Welcome to Zeta World!\nWe will compute the sum of all pi(x) from x = i to j\n";
        -:  158:
        9:  159:                vector<cpp_int> primeNumbers;
       27:  160:                cpp_int minOfUser = read("Please enter i:\n");
       27:  161:                cpp_int max = read("Please enter j:\n");
        9:  162:                cpp_int printOrNot = max - minOfUser;
        -:  163:
        9:  164:                if (minOfUser < 2 or max < 2) {
        2:  165:                        die();
        7:  166:                } else if (max < minOfUser) {
        1:  167:                        die();
        -:  168:                }
        6:  169:                clock_t start_time = clock();
        -:  170:
        -:  171:
       30:  172:                int sum = stoi(calculate(minOfUser, max, primeNumbers, printOrNot));
        6:  173:                cout << "The answer is: " << sum << endl;
        6:  174:                cout << ((clock() - start_time)/1000) << "ms has elapsed\n";
        -:  175:
        -:  176:
        -:  177:        //}
        6:  178:}
        -:  179:
        -:  180: